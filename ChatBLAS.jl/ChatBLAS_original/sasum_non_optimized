#include "chatblas_hip.h"

__global__ void sasum_kernel(int n, float *x, float *sum) {
  extern __shared__ float cache[];

  uint tid = threadIdx.x;
  uint i = blockIdx.x * blockDim.x + threadIdx.x;

  cache[tid] = i < n ? fabs(x[i]) : 0;
  __syncthreads();

  for (uint stride = blockDim.x/2; stride > 0; stride/=2) {
    if (tid < stride) {
      cache[tid] += cache[tid + stride];
    }
    __syncthreads();
  }

  if (tid == 0) {
    atomicAdd(sum, cache[0]);
  }
}

float chatblas_sasum(int n, float *x) {
  float *d_x, *d_sum, h_sum;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  hipMalloc(&d_x, n * sizeof(float));
  hipMalloc(&d_sum, sizeof(float));
  hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
  hipMemset(d_sum, 0, sizeof(float));
  
  sasum_kernel<<<numBlocks, blockSize, blockSize * sizeof(float)>>>(n, d_x, d_sum);

  hipMemcpy(&h_sum, d_sum, sizeof(float), hipMemcpyDeviceToHost);
  
  hipFree(d_x);
  hipFree(d_sum);
  
  return h_sum;
}
