#include "chatblas_cuda.h"
__global__ void sdot_kernel(int n, float *x, float *y, float *res) { __shared__ float products[256]; int index = threadIdx.x + blockIdx.x * blockDim.x; float product = x[index] * y[index]; products[threadIdx.x] = product; __syncthreads(); if (threadIdx.x == 0) { float result = 0; for (int i = 0; i < blockDim.x; i++) { result += products[i]; } atomicAdd(res, result); } } 

float chatblas_sdot( int n, float *x, float *y) { int size = n * sizeof(float); float *d_x, *d_y, *d_res; float res = 0; cudaMalloc((void **)&d_x, size); cudaMalloc((void **)&d_y, size); cudaMalloc((void **)&d_res, sizeof(float)); cudaMemcpy(d_x, x, size, cudaMemcpyHostToDevice); cudaMemcpy(d_y, y, size, cudaMemcpyHostToDevice); int blockSize, numBlocks; blockSize = 256; numBlocks = (n + blockSize - 1) / blockSize; sdot_kernel<<<numBlocks, blockSize>>>(n, d_x, d_y, d_res); cudaMemcpy(&res, d_res, sizeof(float), cudaMemcpyDeviceToHost); cudaFree(d_x); cudaFree(d_y); cudaFree(d_res); return res; }
