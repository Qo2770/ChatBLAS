#include "chatblas_hip.h" 

__global__ void sdsdot_kernel( int n, float b, float *x, float *y, float *res ) { extern __shared__ double shared_memory[]; int i = blockIdx.x * blockDim.x + threadIdx.x; shared_memory[threadIdx.x] = (double)x[i] * (double)y[i]; __syncthreads(); if (threadIdx.x == 0) { double sum = 0; for(int j = 0; j < blockDim.x; j++) { sum += shared_memory[j]; } res[blockIdx.x] = sum; } } 

float chatblas_sdsdot( int n, float b, float *x, float *y) { float *res, *d_x, *d_y, *d_res; hipMalloc((void**)&d_x, n*sizeof(float)); hipMemcpy(d_x, x, n*sizeof(float), hipMemcpyHostToDevice); hipMalloc((void**)&d_y, n*sizeof(float)); hipMemcpy(d_y, y, n*sizeof(float), hipMemcpyHostToDevice); int blockSize = 32; int gridSize = n / blockSize + (n % blockSize > 0); hipMalloc((void**)&d_res, gridSize * sizeof(float)); sdsdot_kernel<<<gridSize, blockSize, blockSize * sizeof(double)>>>(n, b, d_x, d_y, d_res); res = (float*)malloc(gridSize*sizeof(float)); hipMemcpy(res, d_res, gridSize * sizeof(float), hipMemcpyDeviceToHost); float dotProduct = 0.0; for (int i = 0; i < gridSize; i++) { dotProduct += res[i]; } hipFree(d_x); hipFree(d_y); hipFree(d_res); free(res); return dotProduct + b; }
